using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using Mechanical.Core;

namespace Mechanical.Conditions
{
    //// NOTE: we want to be as independent of all other namespaces as possible.

    /// <summary>
    /// Ensures that conditions are met, before the next statement is reached.
    /// </summary>
    public static class Ensure
    {
        #region That, Debug

        //// NOTE: The object name parameter is not technically necessary, since the object in question
        ////       can be identified from the file and line number (generated by the compiler).
        ////       It is just one more tool, that can be (optionally) used to point out what's wrong.

        private const string DefaultObjectName = "Object";

        /// <summary>
        /// Prepares the object for testing.
        /// This is considerably slower than a simple 'if'!
        /// Only use in not performance critical scenarios.
        /// </summary>
        /// <typeparam name="T">The type of the object.</typeparam>
        /// <param name="obj">The object to test.</param>
        /// <param name="file">The source file that contains the caller.</param>
        /// <param name="member">The method or property name of the caller to this method.</param>
        /// <param name="line">The line number in the source file at which this method is called.</param>
        /// <returns>Information about the object being tested.</returns>
        [DebuggerHidden]
        public static IConditionContext<T> That<T>(
            T obj,
            [CallerFilePath] string file = "",
            [CallerMemberName] string member = "",
            [CallerLineNumber] int line = 0 )
        {
            return new ConditionContext<T>(obj, DefaultObjectName, new FileLine(file, member, line));
        }

        /// <summary>
        /// Prepares the object for testing.
        /// This is considerably slower than a simple 'if'!
        /// Only use in not performance critical scenarios.
        /// </summary>
        /// <typeparam name="T">The type of the object.</typeparam>
        /// <param name="name">The name of the object to test. Must be DataStore compatible.</param>
        /// <param name="obj">The object to test.</param>
        /// <param name="file">The source file that contains the caller.</param>
        /// <param name="member">The method or property name of the caller to this method.</param>
        /// <param name="line">The line number in the source file at which this method is called.</param>
        /// <returns>Information about the object being tested.</returns>
        [DebuggerHidden]
        public static IConditionContext<T> That<T>(
            string name,
            T obj,
            [CallerFilePath] string file = "",
            [CallerMemberName] string member = "",
            [CallerLineNumber] int line = 0 )
        {
            return new ConditionContext<T>(obj, name, new FileLine(file, member, line));
        }

        /// <summary>
        /// Prepares the object for testing (only runs in DEBUG builds).
        /// This is considerably slower than a simple 'if' (with '#if DEBUG')!
        /// Only use in not performance critical scenarios.
        /// </summary>
        /// <typeparam name="T">The type of the object.</typeparam>
        /// <param name="obj">The object to test.</param>
        /// <param name="tests">The validations to perform.</param>
        /// <param name="file">The source file that contains the caller.</param>
        /// <param name="member">The method or property name of the caller to this method.</param>
        /// <param name="line">The line number in the source file at which this method is called.</param>
        [Conditional("DEBUG")]
        [DebuggerHidden]
        public static void Debug<T>(
            T obj,
            Action<IConditionContext<T>> tests,
            [CallerFilePath] string file = "",
            [CallerMemberName] string member = "",
            [CallerLineNumber] int line = 0 )
        {
            if( object.ReferenceEquals(tests, null) )
                throw new ArgumentNullException("tests");

            tests(That(obj, file, member, line));
        }

        /// <summary>
        /// Prepares the object for testing (only runs in DEBUG builds).
        /// This is considerably slower than a simple 'if' (with '#if DEBUG')!
        /// Only use in not performance critical scenarios.
        /// </summary>
        /// <typeparam name="T">The type of the object.</typeparam>
        /// <param name="name">The name of the object to test. Must be DataStore compatible.</param>
        /// <param name="obj">The object to test.</param>
        /// <param name="tests">The validations to perform.</param>
        /// <param name="file">The source file that contains the caller.</param>
        /// <param name="member">The method or property name of the caller to this method.</param>
        /// <param name="line">The line number in the source file at which this method is called.</param>
        [Conditional("DEBUG")]
        [DebuggerHidden]
        public static void Debug<T>(
            string name,
            T obj,
            Action<IConditionContext<T>> tests,
            [CallerFilePath] string file = "",
            [CallerMemberName] string member = "",
            [CallerLineNumber] int line = 0 )
        {
            if( object.ReferenceEquals(tests, null) )
                throw new ArgumentNullException("tests");

            tests(That(name, obj, file, member, line));
        }

        #endregion
    }
}
